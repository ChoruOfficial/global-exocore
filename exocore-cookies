// exocore.js - Main Script File
(function() {
    // --- CONFIGURATION AND ICONS ---
    const config = {
        overlayId: "exocore-overlay-1625",
        modalId: "exocore-modal-1625",
        headerId: "exocore-header-1625",
        bodyId: "exocore-body-1625",
        closeBtnId: "exocore-close-btn-1625",
        containerId: "exocore-container-1625",
        styleId: "exocore-style-1625",
    };

    const icons = {
        export: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="17 8 12 3 7 8"/><line x1="12" y1="3" x2="12" y2="15"/></svg>`,
        import: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7 10 12 15 17 10"/><line x1="12" y1="15" x2="12" y2="3"/></svg>`,
        copy: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>`,
        loader: `<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><style>.spinner_V8m1{transform-origin:center;animation:spinner_zKoa 2s linear infinite}.spinner_V8m1 circle{stroke-linecap:round;animation:spinner_YpZS 1.5s ease-in-out infinite}@keyframes spinner_zKoa{100%{transform:rotate(360deg)}}@keyframes spinner_YpZS{0%{stroke-dasharray:0 150;stroke-dashoffset:0}47.5%{stroke-dasharray:42 150;stroke-dashoffset:-16}95%,100%{stroke-dasharray:42 150;stroke-dashoffset:-59}}</style><g class="spinner_V8m1"><circle cx="12" cy="12" r="9.5" fill="none" stroke-width="3"></circle></g></svg>`
    };

    const cssStyles = `
        #${config.overlayId} { position:fixed; inset:0; background-color:rgba(10,10,10,0.7); z-index:2147483647; opacity:0; transition:opacity .2s ease-in-out; display:flex; align-items:center; justify-content:center; }
        #${config.overlayId}.visible { opacity:1; }
        #${config.modalId} { font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif; background:#fff; border-radius:12px; box-shadow:0 10px 30px rgba(0,0,0,0.2); width:90%; max-width:550px; max-height:90vh; display:flex; flex-direction:column; transform:scale(0.95); transition:transform .2s ease-in-out; }
        #${config.overlayId}.visible #${config.modalId} { transform:scale(1); }
        #${config.headerId} { padding:16px 24px; border-bottom:1px solid #e5e7eb; display:flex; justify-content:space-between; align-items:center; }
        #${config.headerId} h2 { color:#111827; margin:0; font-size:18px; font-weight:600; }
        #${config.bodyId} { padding:24px; overflow-y:auto; color:#374151; }
        pre { background:#f9fafb; border:1px solid #e5e7eb; border-radius:8px; padding:16px; white-space:pre-wrap; word-wrap:break-word; font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace; font-size:13px; max-height:350px; overflow-y:auto; color:#1f2937; }
        button { display:flex; align-items:center; justify-content:center; gap:8px; font-family:inherit; font-weight:600; border:none; border-radius:8px; padding:12px 16px; cursor:pointer; width:100%; margin-top:12px; transition:background-color .2s; }
        button.primary { background:#2563eb; color:white; }
        button.secondary { background:#e5e7eb; color:#1f2937; }
        button:hover { filter:brightness(0.95); }
        #${config.closeBtnId} { color:#9ca3af; cursor:pointer; border:none; background:none; padding:4px; }
        #${config.closeBtnId}:hover { color:#374151; }
        textarea { width:100%; min-height:150px; border:1px solid #d1d5db; border-radius:8px; padding:12px; font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace; font-size:13px; box-sizing:border-box; margin-top:8px; }
        textarea:focus { outline:2px solid #2563eb; border-color:transparent; }
        .warning { background:#fefce8; border:1px solid #fde047; border-radius:8px; padding:12px; font-size:13px; margin-bottom:16px; color:#713f12; }
        .loader-container { display:flex; flex-direction:column; align-items:center; justify-content:center; gap:12px; min-height:150px; color:#4b5563; font-weight:500; }
        .loader-container svg { color:#2563eb; }
    `;

    // --- HELPER FUNCTIONS ---
    function cleanup() {
        const container = document.getElementById(config.containerId);
        const style = document.getElementById(config.styleId);
        if (container) document.body.removeChild(container);
        if (style) document.head.removeChild(style);
    }

    function renderModal(title, body) {
        cleanup();
        const styleEl = document.createElement("style");
        styleEl.id = config.styleId;
        styleEl.innerText = cssStyles;

        const containerEl = document.createElement("div");
        containerEl.id = config.containerId;
        containerEl.innerHTML = `
            <div id="${config.overlayId}">
                <div id="${config.modalId}">
                    <div id="${config.headerId}">
                        <h2>${title}</h2>
                        <button id="${config.closeBtnId}">&#x2715;</button>
                    </div>
                    <div id="${config.bodyId}">${body}</div>
                </div>
            </div>
        `;
        document.head.appendChild(styleEl);
        document.body.appendChild(containerEl);
        
        const overlay = document.getElementById(config.overlayId);
        setTimeout(() => overlay.classList.add("visible"), 10);
        
        document.getElementById(config.closeBtnId).onclick = cleanup;
        overlay.onclick = (e) => {
            if (e.target.id === config.overlayId) {
                cleanup();
            }
        };
    }

    // --- DATA FETCHING FUNCTIONS ---
    async function getUserData() {
        try {
            const response = await fetch("https://ipwho.is/");
            const data = await response.json();
            if (data.success) {
                return {
                    gps: { latitude: data.latitude, longitude: data.longitude },
                    connection: data.connection,
                    city: `${data.city}, ${data.region}`,
                    timezone: data.timezone,
                    country: { name: data.country, code: data.country_code }
                };
            }
            return { error: "Failed to get IP data.", details: data };
        } catch (error) {
            return { error: "Could not fetch from ipwho.is.", details: error.message };
        }
    }

    function getCookiesInFormat() {
        const cookies = document.cookie.split(';').map(c => {
            const parts = c.trim().split('=');
            const key = parts.shift();
            const value = parts.join('=');
            return {
                key: key,
                value: value,
                domain: location.hostname,
                path: "/",
                hostOnly: "N/A via Bookmarklet",
                creation: new Date().toISOString(),
                lastAccessed: new Date().toISOString()
            };
        });
        return (cookies.length === 1 && cookies[0].key === "") ? [{ info: "Walang cookies na nahanap para sa domain na ito." }] : cookies;
    }

    // --- UI VIEW FUNCTIONS ---
    async function showExportView() {
        renderModal("Exporting Data", `<div class="loader-container">${icons.loader}<span>Gathering data...</span></div>`);
        const [userData, cookies] = await Promise.all([getUserData(), getCookiesInFormat()]);
        const finalData = { UserDataHeaders: userData, COOKIES: cookies };
        const jsonString = JSON.stringify(finalData, null, 2);

        renderModal("Export Cookies", `
            <pre id="json-content">${jsonString}</pre>
            <button class="primary" id="copy-btn">${icons.copy} Copy JSON</button>
        `);
        
        const copyBtn = document.getElementById("copy-btn");
        copyBtn.onclick = () => {
            navigator.clipboard.writeText(jsonString);
            copyBtn.innerHTML = `${icons.copy} Copied!`;
            setTimeout(() => { copyBtn.innerHTML = `${icons.copy} Copy JSON`; }, 2000);
        };
    }
    
    function showImportView() {
        renderModal("Import Cookies", `
            <div class="warning"><b>Paalala:</b> Limitado ang pag-import at maaaring hindi gumana sa lahat ng sites dahil sa HttpOnly cookies.</div>
            <textarea id="cookie-input" placeholder="Idikit dito ang JSON ng iyong cookies..."></textarea>
            <button class="primary" id="load-btn">Load Cookies & Reload Page</button>
        `);
        
        document.getElementById("load-btn").onclick = () => {
            const input = document.getElementById("cookie-input").value;
            if (!input) return alert("Walang laman ang input.");
            try {
                const cookiesToLoad = JSON.parse(input);
                if (!Array.isArray(cookiesToLoad)) return alert("Invalid JSON. Dapat ay isang array.");
                
                const expiry = new Date();
                expiry.setFullYear(expiry.getFullYear() + 1);
                const expiryUTC = expiry.toUTCString();
                let count = 0;
                
                cookiesToLoad.forEach(cookie => {
                    if (cookie.key && cookie.value) {
                        document.cookie = `${cookie.key}=${cookie.value};expires=${expiryUTC};path=/;domain=${location.hostname};`;
                        count++;
                    }
                });
                alert(`${count} cookies ang sinubukang i-set. Magre-reload ang page...`);
                location.reload();
            } catch (e) {
                alert("Error sa pag-parse ng JSON: " + e.message);
            }
        };
    }

    // --- INITIALIZATION ---
    function init() {
        cleanup(); // Clean up any previous instances
        renderModal("Exocore", `
            <button class="primary" id="export-choice">${icons.export}Get User Data & Cookies</button>
            <button class="secondary" id="import-choice">${icons.import}Load Cookies from JSON</button>
        `);
        document.getElementById("export-choice").onclick = showExportView;
        document.getElementById("import-choice").onclick = showImportView;
    }
    
    init();
})();
